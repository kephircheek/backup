" ------ PLUGINS ------
"" Load plugins
so ~/.vim/plugins.vim
" --------------------------------------------------------------------------------

filetype plugin on
set encoding=utf-8

" --- STYLE ---
"
" Highlight search items
set hlsearch
set number
"
" Colors
set background=dark
colorscheme PaperColor
let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default.dark': {
  \       'transparent_background': 1
  \     }
  \   },
  \   'language': {
  \     'python': {
  \       'highlight_builtins' : 1
  \     },
  \     'cpp': {
  \       'highlight_standard_library': 1
  \     },
  \     'c': {
  \       'highlight_builtins' : 1
  \     }
  \   }
  \ }
"
" Relative number in visual mode
augroup every
  autocmd!
  au InsertEnter * set norelativenumber
  au InsertLeave * set relativenumber
augroup END
"
" TMUX status line
let g:tmuxline_theme = 'lightline'
let g:tmuxline_separators = {
    \ 'left'      : '',
    \ 'left_alt'  : '|',
    \ 'right'     : '',
    \ 'right_alt' : '|',
    \ 'space'     : ' '}
let g:tmuxline_preset = {
	\ 'a'    : '#S',
	\ 'b'    : '#(whoami)',
	\ 'win'  : ['#I', '#W'],
	\ 'cwin' : '#W',
	\ 'x'    : '#(ssh_status)',
	\ 'y'    : ['%a %d', '%b', '%R'],
	\ 'z'    : '#H'}
" --------------------------------------------------------------------------------


" --- FEATURES ---
"
" Syntax
let python_highlight_all=1
syntax on
"
set spell spelllang=ru,en_us
"
set mouse=a
"
" System clipboard only MacOS
set clipboard=unnamed
"
" Erasing previously entered characters in insert mode
"  or use `set backspace=2`
set backspace=indent,eol,start
"
" Smart search
set smartcase
set ignorecase

" Split: specify where the splits should occur
set splitbelow
set splitright
"
"
" Cancel redraw when macros
" set lazyredraw
"
" Need to fast update hunk with vim-gitgutter
set updatetime=100
"
" Enable folding
set foldmethod=indent
set foldlevel=99
"
" Close preview window after completion
let g:ycm_autoclose_preview_window_after_completion=1
"
" Replace netrw with vifm
let g:vifm_replace_netrw = 1
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1
let g:vifm_embed_term    = 1
" --------------------------------------------------------------------------------

" --- SHORTCUTS ---
"
" fast switch buffer
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
"
" fast switch tab
nnoremap <s-j> gt
nnoremap <s-K> gT
"
" exec sh files via Ctrl + Y
autocmd filetype sh nnoremap <C-Y> :w <bar> exec '!clear; source '.shellescape('%')<CR>
"
" folding
nnoremap <space> za
vnoremap <Space> zf
"
" goto defenition
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" --------------------------------------------------------------------------------


" --- LIGHTLINE ---
set laststatus=2

let g:lightline = {
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'gitbranch', 'gitstatus', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'gitbranch': 'FugitiveHead',
	\   'filename': 'LightlineFilename',
	\  	'gitstatus': 'GitStatus'
	\ },
	\ 'colorscheme': 'PaperColor',
	\ }

function! LightlineFilename()
	return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
		  \ &filetype ==# 'unite' ? unite#get_status_string() :
		  \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
		  \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
endfunction

function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0
" --------------------------------------------------------------------------------


" --- FORMATING ----
"
" mutt: limit the width of e-mail text to 72 characters
au BufRead /tmp/mutt-* set tw=72
"
" Delete trailing whitespace with bufer writing
autocmd BufWritePre * %s/\s\+$//e
"
au BufNewFile,BufRead *.json,*.html,*.css,*.xml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2
"
" default
set tabstop=4
set shiftwidth=4
" --------------------------------------------------------------------------------

